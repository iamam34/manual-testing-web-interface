<?php
/**
 * http://fwebde.com/php/simple-crud-with-codeigniter/
 */
class Result extends CI_Model {
    const TABLE = 'TestResults';
    
    // public so they an be read without clunky getters
    public $id;
    public $testId;
    public $date;
    public $tester;
    public $operatingSystem;
    public $build;
    public $result;
    public $comment;

    public function __construct() {
        $this->load->database();
    }
    
    public function pretty_print() {
        return Result::prettify($this);
    }
    
    public function read($id) {
        $query = $this->db->get_where(self::TABLE, array('id'=>$id));
        if ($query->num_rows !== 1) {
            throw new Exception("Result with ID $id not found in database");
        }

        $rows = $query->result();
        Result::check_result($rows);
        $row = $rows[0];
        $test_result = new Result();
        $test_result->load($row);
        return $test_result;
    }
    
    /*
     * Return a map from categoryID to categoryName for all categories
     */
    public function list_all($testId) {
        $this->db->where('testId', $testId);
        $this->db->order_by('id');
        $query = $this->db->get(self::TABLE);
        $this->check_result($query);
        $list = array();
        foreach ($query->result() as $row) {
            $list[$row->id] = Result::prettify($row);
        }
        return $list;
    }
    
    public function create($data) {
        $this->db->insert(self::TABLE, $data);
        // get autogenerated id of new object
        $query = $this->db->get_where(self::TABLE, $data);
        $this->check_result($query);
        if ($query->num_rows === 1) {
            $rows = $query->result();
            return $rows[0]->id;
        } else {
            return null;
        }
    }
    
    public function update($id, $data) {
        $this->db->where('id', $id);
        $this->db->update(self::TABLE, $data);
        return $id;
    }
    
    public function delete($id) {
        $this->db->where('id', $id);
        $this->db->delete(self::TABLE);
    }

    // Given a row from the database, copy all database column values
    // into 'this', converting column names to fields names by converting
    // first char to lower case.
    private function load($row) {
        foreach ((array) $row as $field => $value) {
            $field_name = strtolower($field[0]) . substr($field, 1);
            $this->$field_name = $value;
        }
    }
    
    // Check that the result from a DB query was OK
    private static function check_result($result) {
        global $db;
        if (!$result) {
             die("Database error :(");
        }
    }
    
    private static function prettify($object) {
        return $object->result . ' (' . $object->operatingSystem . ')';
    }
}